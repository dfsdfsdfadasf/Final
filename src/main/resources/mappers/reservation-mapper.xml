<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="ResMapper">
  
  <!-- 휴일 날짜 반환  -->
  <select id="dayoff" resultType="java.lang.String">
  SELECT
<choose>
<when test="offday == 'mon'">
 <![CDATA[
	 TO_CHAR(TRUNC(sysdate,'iw')+(level*7-7) ,'yyyymmdd') mon FROM dual CONNECT BY LEVEL <= 12
 ]]>
</when>
<when test="offday == 'tue'">
 <![CDATA[
	 TO_CHAR(TRUNC(sysdate,'iw')+(level*7+1-7) ,'yyyymmdd') tue FROM dual CONNECT BY LEVEL <= 12
 ]]>
</when>
<when test="offday == 'wed'">
 <![CDATA[
	 TO_CHAR(TRUNC(sysdate,'iw')+(level*7+2-7) ,'yyyymmdd') wed FROM dual CONNECT BY LEVEL <= 12
 ]]>
</when>
<when test="offday == 'thu'">
 <![CDATA[
	 TO_CHAR(TRUNC(sysdate,'iw')+(level*7+3-7) ,'yyyymmdd') thu FROM dual CONNECT BY LEVEL <= 12
 ]]>
</when>
<when test="offday == 'fri'">
 <![CDATA[
	 TO_CHAR(TRUNC(sysdate,'iw')+(level*7+4-7) ,'yyyymmdd') fri FROM dual CONNECT BY LEVEL <= 12
 ]]>
</when>
<when test="offday == 'sat'">
 <![CDATA[
	 TO_CHAR(TRUNC(sysdate,'iw')+(level*7+5-7) ,'yyyymmdd') sat FROM dual CONNECT BY LEVEL <= 12
 ]]>
</when>
<otherwise>
<![CDATA[
	 TO_CHAR(TRUNC(sysdate,'iw')+(level*7+6-7) ,'yyyymmdd') sun FROM dual CONNECT BY LEVEL <= 12
 ]]>
</otherwise>
</choose>
  
                  
  </select>
	
	<!-- 휴일 값 가져오기 -->
  <select id="getOffday" resultType="java.lang.String">
   select offday from business  where biz_seq = #{biz_seq}
  </select>
  
  <!-- 영업 가능 시간 가져오기 -->
  <select id="getOnday" resultType="java.lang.String">
  select onday from business where biz_seq = #{biz_seq}
  </select>
  
  
  <!-- 예약 취소  -->
  <delete id="resDelete">
  delete from reservation where res_no = #{res_no}
  </delete>
  
  <!--관리자의 예약 거절  -->
  <update id="resRefusal">
  update reservation set res_checked = 'N' where res_no =#{res_no}
  </update>
  
  <!-- 예약 시간 선택 후 예약 하기 -->
  <insert id="registerTime">
  insert into reservation values(res_seq.nextval,#{res_name},#{userId},#{res_date},#{res_time},'Y',#{biz_seq},sysdate)
  </insert>
  
  <!-- 예약이 된 시간은 예약 못하게 사용자에게 알려주기 -->
  <select id="reservedTime" resultType="java.lang.String">
select res_checked from reservation where res_time=#{res_time} and res_date=#{res_date}and biz_seq=#{biz_seq}
  </select>
  
  <!-- 예약 정보 가져오기 수정 필요 select * from reservation where res_name = #{res_name} -->  
  <select id="getResInfo" resultType="dream.tk.dto.ReservationDTO">
  select * from reservation where biz_seq = #{biz_seq} and res_checked = 'Y'
  </select>
  
  <!-- 팝오버에 뿌릴 예약 정보 가져오기 -->
  <select id="resInfoList" resultType="dream.tk.dto.ReservationDTO">
  select * from reservation where userId=#{userId} and res_checked = 'Y'
  </select>
  
  <!-- 정액권 결제 -->
  <insert id="resPay">
 insert into res_payment values (pay_seq.nextval,#{memberId},#{imp_uid},#{merchant_uid},#{biz_email},sysdate,#{card_no},#{price},0)
  </insert>
  <!-- 정액권 환불 muid 가져오기 -->
  <select id="refundPay" resultType="java.lang.String">
	select merchant_uid from res_payment where pay_no= #{pay_no} and refund = 0
  </select>
  
  <!-- 사용자가 구매한 순서대로 환불 진행하기  -->
  <select id="refundOrder" resultType="int">
  select pay_no from res_payment where memberId=#{memberId} and (refund =0 ) and rownum = 1 order by pay_no desc
  </select>
   <select id="refundPrice" resultType="int">
  select price from res_payment where memberId=#{memberId} and refund = 0 and rownum = 1 order by pay_no desc
  </select>
  
  <!--환불 할 때 refund 컬럼 1로 바꿔서 환불된 건지 아닌지 확인  -->
  <update id="refundCheck">
  update res_payment set refund =1 where pay_no = #{pay_no} 
  </update>
  
  <select id="findRefundCheck" resultType="int">
  select refund from res_payment where pay_no = #{pay_no}
  </select>
  
  <!-- 할인권 구매 하였을때 비즈니스 멤버 기간 , 등급 업데이트 -->
  <update id="updatePrem">
  update business_member set premium = 'Y' ,prm_exp_date = 
  <choose>
  <when test="price == '100'">
  add_months(sysdate,+1)
  </when>
  <when test="price == '200'">
  add_months(sysdate,+6)
  </when>
<otherwise>
 add_months(sysdate,+12)
</otherwise>
  </choose>
   where id = #{id}
  </update>
  
  <!-- 환불 하였을때 등급 업데이트 -->
  <update id="downGradePrem">
  update business_member set premium = 'N' where id = #{id}
  </update>
  
  <!--환불 만료기간 업데이트  -->
  <update id="updateExpDate">
  update business_member set prm_exp_date = 
  <choose>
  <when test="price == '100'">
to_char(add_months(prm_exp_date,-1),'yyyy-mm-dd')
  </when>
  <when test="price == '200'">
 to_char(add_months(prm_exp_date,-6),'yyyy-mm-dd')
  </when>
<otherwise>
to_char(add_months(prm_exp_date,-12),'yyyy-mm-dd')
</otherwise>
  </choose>
 where id = #{memberId}
  </update>
 
  
  <!-- 정액권 남은 요일 계산 -->
  <select id="daysLeft" resultType="int">
  select ceil(#{prm_exp_date}-sysdate) from business_member where  (#{prm_exp_date}-sysdate) > 0 and id = #{id}
  </select>
  
  
  <!--비즈니스 세팅  -->
  <insert id="bizSetting" >
  insert into business values(biz_seq.nextval,#{biz_type},#{bizNum},#{businessName},#{businessNameEng},#{businessContact},#{address1},#{address2},#{postcode},#{address1Kor},#{offday},#{timeAvailable},sysdate,#{seq},0)
  </insert>
  
  <!-- 실시간 알람 -->
  <insert id="alarmInsert">
  insert into notification  (noti_no,userId,content,noti_createDate)  values (noti_seq.nextval,#{userId},#{content},sysdate)
  </insert>
   
  
  </mapper>